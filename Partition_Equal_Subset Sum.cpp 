// Simran Vedpathak
// Full Comdingbazi
#include "bits/stdc++.h"
using namespace std;
#define ll long long
#define pb push_back
#define vll vector<ll>
#define stll set<ll>
#define msgll multiset<ll,greater<>>
#define msll multiset<ll>
#define pll pair<ll, ll>
#define mpll map<ll, ll>
#define vpll vector<pair<ll,ll>>
#define ss second
#define ff first
#define read(n,x) for(ll i=0;i<n;i++){ll k;cin>>k;x.pb(k);}
#define rep(i,j,k) for(ll i=j;i<k;i++)
#define repn(i,j,k) for(ll i=j;i>=k;i--)
#define st(v) sort(v.begin(),v.end())
#define sz(x) (ll)x.size()
#define no cout << "No\n";
#define yes cout << "Yes\n";


const ll mod = 1e9 + 7;
const ll N = 2e5 + 10;
ll expo(ll a, ll b)
{
    ll res = 1;
    while (b > 0)
    {
        if (b & 1)
            res = (res * a);
        a = (a * a);
        b = b >> 1;
    }
    return res;
}
//_______Time Complexity O(n*target) and Space Complexity O(target)
bool isposs(vector<int> &v,ll target,int n){
     vector<bool>temp(target+1,false),dp(target+1,false);
     temp[v[0]]=1,dp[v[0]]=1;
     
    dp[0]=1;
     rep(i,1,n){
       dp[0]=1;
         rep(j,1,target+1){
             bool nottake=dp[j];
             bool take=0;
             if(v[i]<=j){
                
                  take=dp[j-v[i]];
              
             }
             temp[j]=(take|nottake);

         }
         dp=temp;
     }
return dp[target];
}
bool canPartition(vector<int> &arr, int n)
{
    ll sum=0;
    rep(i,0,n)sum+=arr[i];
    if(sum%2)return 0;    
	return isposs(arr, sum/2,n);

}